import * as maptalks from 'maptalks';
declare type Grids = {
    grids: BBox[];
    averageX: number;
    averageY: number;
    ROWS: number;
    COLS: number;
};
declare class BBox {
    minlng: number;
    minlat: number;
    maxlng: number;
    maxlat: number;
    minx: number;
    miny: number;
    maxx: number;
    maxy: number;
    coordinates: Array<Array<number>>;
    positions: Array<THREE.Vector3>;
    indexs: Array<number>;
    key: string;
    constructor(minlng: number, minlat: number, maxlng: number, maxlat: number);
    /**
     *
     * @param {*} map
     */
    updateBBoxPixel(map: maptalks.Map): this;
    /**
     *Determine whether a point is included
     * @param {*} c
     */
    containsCoordinate(c: Array<number> | maptalks.Coordinate): boolean;
    /**
     *Judge rectangle intersection
     * @param {*} pixel
     * @param {*} size
     */
    isRecCross(pixel: maptalks.Point, size: number): boolean;
    /**
     *generate grids
     * @param {*} minlng
     * @param {*} minlat
     * @param {*} maxlng
     * @param {*} maxlat
     */
    static initGrids(minlng: number, minlat: number, maxlng: number, maxlat: number): Grids;
}
export default BBox;
