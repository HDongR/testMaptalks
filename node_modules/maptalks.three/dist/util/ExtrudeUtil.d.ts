import * as THREE from 'three';
import * as maptalks from 'maptalks';
import { ThreeLayer } from './../index';
import { MergeAttributeType, PolygonType, SinglePolygonType } from './../type/index';
/**
 * this is for ExtrudeMesh util
 */
/**
 * Fix the bug in the center of multipoygon
 * @param {maptalks.Polygon} polygon
 * @param {*} layer
 */
/**
 *  Support custom center point
 * @param {maptalks.Polygon|maptalks.MultiPolygon} polygon
 * @param {*} height
 * @param {*} layer
 */
export declare function getExtrudeGeometry(polygon: PolygonType, height: number, layer: ThreeLayer, center?: maptalks.Coordinate): THREE.BufferGeometry;
export declare function getExtrudeGeometryParams(polygon: PolygonType, height: number, layer: ThreeLayer, center: maptalks.Coordinate, centerPt?: THREE.Vector3, altCache?: any): MergeAttributeType;
/**
 *
 * @param {*} geometry
 * @param {*} color
 * @param {*} _topColor
 */
export declare function initVertexColors(geometry: THREE.BufferGeometry, color: string, _topColor: string, minZ: number | Array<any>): Float32Array;
/**
 *
 * @param {*} polygon
 * @param {*} layer
 * @param {*} center
 */
export declare function getPolygonPositions(polygon: PolygonType, layer: ThreeLayer, center: maptalks.Coordinate, centerPt: THREE.Vector3, isArrayBuff?: boolean): Array<Array<Array<Array<number>> | ArrayBufferLike>>;
export declare function getSinglePolygonPositions(polygon: SinglePolygonType, layer: ThreeLayer, center: maptalks.Coordinate, centerPt: THREE.Vector3, isArrayBuff?: boolean): Array<Array<Array<number>> | ArrayBufferLike>;
export declare function getPolygonArrayBuffer(polygon: PolygonType): Array<Array<ArrayBufferLike>>;
export declare function getSinglePolygonArrayBuffer(polygon: SinglePolygonType, isGeoJSON: boolean): Array<ArrayBufferLike>;
