import * as maptalks from 'maptalks';
import * as THREE from 'three';
import BaseObject from './BaseObject';
import { FatLineMaterialType, LineOptionType, LineStringType } from './type';
import { ThreeLayer } from './index';
declare const FatLines_base: {
    new (...args: any[]): {
        [x: string]: any;
        _faceMap: number[][];
        _baseObjects: BaseObject[];
        _datas: any[];
        faceIndex: number;
        index: number;
        _geometriesAttributes: any[];
        _geometryCache: THREE.BufferGeometry;
        isHide: boolean;
        _initBaseObjectsEvent(baseObjects: BaseObject[]): any;
        _proxyEvent(baseObject: BaseObject): void;
        _getHideGeometryIndex(attribute: string): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: THREE.BufferAttribute, attribute: string): any;
        _showGeometry(baseObject: BaseObject, isHide: boolean): any;
        getSelectMesh(): {
            data: any;
            baseObject: BaseObject;
        };
        _getIndex(faceIndex?: number): number;
        _init(): void;
        _setPickObject3d(): void;
        isAdd: boolean;
        object3d: THREE.Object3D;
        options: import("./type").BaseObjectOptionType;
        toolTip: maptalks.ui.ToolTip;
        infoWindow: maptalks.ui.InfoWindow;
        _mouseover: boolean;
        _showPlayer: any;
        _visible: boolean;
        _zoomVisible: boolean;
        _vt: any;
        picked: boolean;
        pickObject3d: THREE.Object3D;
        id: string | number;
        type: string;
        readonly isBaseObject: boolean;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): THREE.Object3D;
        getId(): string | number;
        setId(id: string | number): any;
        getType(): string;
        getOptions(): import("./type").BaseObjectOptionType;
        getProperties(): object;
        setProperties(property: object): any;
        getLayer(): any;
        getMap(): maptalks.Map;
        getCenter(): maptalks.Coordinate;
        getAltitude(): number;
        setAltitude(altitude: number): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): THREE.Material;
        setSymbol(material: THREE.Material): any;
        setInfoWindow(options: object): any;
        getInfoWindow(): maptalks.ui.InfoWindow;
        openInfoWindow(coordinate: maptalks.Coordinate): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: string, options: object): any;
        getToolTip(): maptalks.ui.ToolTip;
        openToolTip(coordinate: maptalks.Coordinate): any;
        closeToolTip(): any;
        removeToolTip(): any;
        animateShow(options: object, cb: Function): any;
        getMinZoom(): number;
        getMaxZoom(): number;
        isAsynchronous(): boolean;
        fire(eventType: string, param: any): any;
        config(): any;
        setPickObject3d(object3d: THREE.Object3D): any;
        _initOptions(options: import("./type").BaseObjectOptionType): any;
        _createMesh(geometry: THREE.BufferGeometry, material: THREE.Material): any;
        _createGroup(): any;
        _createLine(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: THREE.BufferGeometry, material: THREE.PointsMaterial): any;
        _createLineSegments(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial): any;
        _computeLineDistances(geometry: THREE.BufferGeometry): void;
    };
} & typeof BaseObject;
/**
 *
 */
declare class FatLines extends FatLines_base {
    constructor(lineStrings: Array<LineStringType>, options: LineOptionType, material: FatLineMaterialType, layer: ThreeLayer);
    _setMaterialRes(layer: any, material: any): void;
    _setPickObject3d(ps?: any, linewidth?: any): void;
    identify(coordinate: any): boolean;
    setSymbol(material: any): this;
    getSelectMesh(): {
        data: any;
        baseObject: BaseObject;
    };
    /**
       * update geometry attributes
       * @param {*} bufferAttribute
       * @param {*} attribute
       */
    _updateAttribute(bufferAttribute: any, attribute: any): this;
    _showGeometry(baseObject: any, isHide: any): this;
    _workerLoad(result: any): void;
}
export default FatLines;
