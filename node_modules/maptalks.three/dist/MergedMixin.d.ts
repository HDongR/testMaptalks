import * as THREE from 'three';
import BaseObject from './BaseObject';
declare type Constructor<T> = new (...args: any[]) => T;
/**
 * This is for the merger, MergedExtrudeMesh,Points ...
 * @param {*} Base
 */
declare const MergedMixin: <T extends Constructor<BaseObject>>(Base: T) => {
    new (...args: any[]): {
        [x: string]: any;
        _faceMap: Array<Array<number>>;
        _baseObjects: Array<BaseObject>;
        _datas: Array<any>;
        faceIndex: number;
        index: number;
        _geometriesAttributes: Array<any>;
        _geometryCache: THREE.BufferGeometry;
        isHide: boolean;
        /**
         *
         * @param {*} baseObjects
         */
        _initBaseObjectsEvent(baseObjects: Array<BaseObject>): any;
        /**
         *Events representing the merge
         * @param {*} baseObject
         */
        _proxyEvent(baseObject: BaseObject): void;
        /**
         * Get the index of the monomer to be hidden
         * @param {*} attribute
         */
        _getHideGeometryIndex(attribute: string): {
            indexs: number[];
            count: number;
        };
        /**
         * update geometry attributes
         * @param {*} bufferAttribute
         * @param {*} attribute
         */
        _updateAttribute(bufferAttribute: THREE.BufferAttribute, attribute: string): any;
        /**
         * show or hide monomer
         * @param {*} baseObject
         * @param {*} isHide
         */
        _showGeometry(baseObject: BaseObject, isHide: boolean): any;
        /**
         * Get selected monomer
         */
        getSelectMesh(): {
            data: any;
            baseObject: BaseObject;
        };
        _getIndex(faceIndex?: number): number;
        _init(): void;
        _setPickObject3d(): void;
        isAdd: boolean;
        /**
         *
         * @param {*} baseObjects
         */
        object3d: THREE.Object3D;
        options: import("./type").BaseObjectOptionType;
        toolTip: import("../types/maptalks").ui.ToolTip;
        infoWindow: import("../types/maptalks").ui.InfoWindow;
        _mouseover: boolean;
        _showPlayer: any;
        _visible: boolean;
        _zoomVisible: boolean;
        _vt: any;
        picked: boolean;
        pickObject3d: THREE.Object3D;
        id: string | number;
        type: string;
        readonly isBaseObject: boolean;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): THREE.Object3D;
        getId(): string | number;
        setId(id: string | number): any;
        getType(): string;
        getOptions(): import("./type").BaseObjectOptionType;
        getProperties(): object;
        setProperties(property: object): any;
        getLayer(): any;
        getMap(): import("../types/maptalks").Map;
        getCenter(): import("../types/maptalks").Coordinate;
        getAltitude(): number;
        setAltitude(altitude: number): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): THREE.Material;
        setSymbol(material: THREE.Material): any;
        setInfoWindow(options: object): any;
        getInfoWindow(): import("../types/maptalks").ui.InfoWindow;
        openInfoWindow(coordinate: import("../types/maptalks").Coordinate): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: string, options: object): any;
        getToolTip(): import("../types/maptalks").ui.ToolTip;
        openToolTip(coordinate: import("../types/maptalks").Coordinate): any;
        closeToolTip(): any;
        removeToolTip(): any;
        animateShow(options: object, cb: Function): any;
        getMinZoom(): number;
        getMaxZoom(): number;
        isAsynchronous(): boolean;
        fire(eventType: string, param: any): any;
        config(): any;
        setPickObject3d(object3d: THREE.Object3D): any;
        _initOptions(options: import("./type").BaseObjectOptionType): any;
        _createMesh(geometry: THREE.BufferGeometry, material: THREE.Material): any;
        _createGroup(): any;
        _createLine(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: THREE.BufferGeometry, material: THREE.PointsMaterial): any;
        _createLineSegments(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial): any;
        _computeLineDistances(geometry: THREE.BufferGeometry): void;
    };
} & T;
export default MergedMixin;
