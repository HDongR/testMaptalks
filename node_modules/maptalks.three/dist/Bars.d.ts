import * as maptalks from 'maptalks';
import BaseObject from './BaseObject';
import { BarOptionType } from './type/index';
import { ThreeLayer } from './index';
declare const Bars_base: {
    new (...args: any[]): {
        [x: string]: any;
        _faceMap: number[][];
        _baseObjects: BaseObject[];
        _datas: any[];
        faceIndex: number;
        index: number;
        _geometriesAttributes: any[];
        _geometryCache: import("three").BufferGeometry;
        isHide: boolean;
        _initBaseObjectsEvent(baseObjects: BaseObject[]): any;
        _proxyEvent(baseObject: BaseObject): void;
        _getHideGeometryIndex(attribute: string): {
            indexs: number[];
            count: number;
        };
        _updateAttribute(bufferAttribute: import("three").BufferAttribute, attribute: string): any;
        _showGeometry(baseObject: BaseObject, isHide: boolean): any;
        getSelectMesh(): {
            data: any;
            baseObject: BaseObject;
        };
        _getIndex(faceIndex?: number): number;
        _init(): void;
        _setPickObject3d(): void;
        isAdd: boolean;
        object3d: import("three").Object3D;
        options: import("./type/BaseOption").BaseObjectOptionType;
        toolTip: maptalks.ui.ToolTip;
        infoWindow: maptalks.ui.InfoWindow;
        _mouseover: boolean;
        _showPlayer: any;
        _visible: boolean;
        _zoomVisible: boolean;
        _vt: any;
        picked: boolean;
        pickObject3d: import("three").Object3D;
        id: string | number;
        type: string;
        readonly isBaseObject: boolean;
        addTo(layer: any): any;
        remove(): any;
        getObject3d(): import("three").Object3D;
        getId(): string | number;
        setId(id: string | number): any;
        getType(): string;
        getOptions(): import("./type/BaseOption").BaseObjectOptionType;
        getProperties(): object;
        setProperties(property: object): any;
        getLayer(): any;
        getMap(): maptalks.Map;
        getCenter(): maptalks.Coordinate;
        getAltitude(): number;
        setAltitude(altitude: number): any;
        show(): any;
        hide(): any;
        isVisible(): boolean;
        getSymbol(): import("three").Material;
        setSymbol(material: import("three").Material): any;
        setInfoWindow(options: object): any;
        getInfoWindow(): maptalks.ui.InfoWindow;
        openInfoWindow(coordinate: maptalks.Coordinate): any;
        closeInfoWindow(): any;
        removeInfoWindow(): any;
        setToolTip(content: string, options: object): any;
        getToolTip(): maptalks.ui.ToolTip;
        openToolTip(coordinate: maptalks.Coordinate): any;
        closeToolTip(): any;
        removeToolTip(): any;
        animateShow(options: object, cb: Function): any;
        getMinZoom(): number;
        getMaxZoom(): number;
        isAsynchronous(): boolean;
        fire(eventType: string, param: any): any;
        config(): any;
        setPickObject3d(object3d: import("three").Object3D): any;
        _initOptions(options: import("./type/BaseOption").BaseObjectOptionType): any;
        _createMesh(geometry: import("three").BufferGeometry, material: import("three").Material): any;
        _createGroup(): any;
        _createLine(geometry: import("three").BufferGeometry, material: import("three").LineBasicMaterial | import("three").LineDashedMaterial): any;
        _createLine2(geometry: any, material: any): any;
        _createPoints(geometry: import("three").BufferGeometry, material: import("three").PointsMaterial): any;
        _createLineSegments(geometry: import("three").BufferGeometry, material: import("three").LineBasicMaterial | import("three").LineDashedMaterial): any;
        _computeLineDistances(geometry: import("three").BufferGeometry): void;
    };
} & typeof BaseObject;
/**
 * merged bars
 */
declare class Bars extends Bars_base {
    constructor(points: Array<BarOptionType>, options: BarOptionType, material: THREE.Material, layer: ThreeLayer);
    identify(): boolean;
}
export default Bars;
