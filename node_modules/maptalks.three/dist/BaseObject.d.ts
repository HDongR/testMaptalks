import * as maptalks from 'maptalks';
import * as THREE from 'three';
import { BaseObjectOptionType } from './type/BaseOption';
declare const BaseObject_base: any;
/**
 * EVENTS=[
 *  'add',
 *  'remove',
    'mousemove',
    'click',
    'mousedown',
    'mouseup',
    'dblclick',
    'contextmenu',
    'touchstart',
    'touchmove',
    'touchend',
    'mouseover',
    'mouseout',
    'idchange',
    'propertieschange',
    'show',
    'hide',
    'symbolchange'
     empty
];
 * This is the base class for all 3D objects
 *
 *
 * Its function and maptalks.geometry are as similar as possible
 *
 * maptalks.Eventable(Base) return a Class  https://github.com/maptalks/maptalks.js/blob/master/src/core/Eventable.js
 *
 */
declare class BaseObject extends BaseObject_base {
    isAdd: boolean;
    object3d: THREE.Object3D;
    options: BaseObjectOptionType;
    toolTip: maptalks.ui.ToolTip;
    infoWindow: maptalks.ui.InfoWindow;
    _mouseover: boolean;
    _showPlayer: any;
    _visible: boolean;
    _zoomVisible: boolean;
    _vt: any;
    picked: boolean;
    pickObject3d: THREE.Object3D;
    id: string | number;
    type: string;
    _baseObjects: BaseObject[];
    readonly isBaseObject: boolean;
    constructor(id?: string | number);
    addTo(layer: any): this;
    remove(): this;
    getObject3d(): THREE.Object3D;
    getId(): string | number;
    setId(id: string | number): this;
    getType(): string;
    getOptions(): BaseObjectOptionType;
    getProperties(): object;
    setProperties(property: object): this;
    getLayer(): any;
    getMap(): maptalks.Map;
    getCenter(): maptalks.Coordinate;
    getAltitude(): number;
    /**
     * Different objects need to implement their own methods
     * @param {*} altitude
     */
    setAltitude(altitude: number): this;
    show(): this;
    hide(): this;
    isVisible(): boolean;
    /**
     *  Different objects need to implement their own methods
     */
    getSymbol(): THREE.Material;
    /**
     *  Different objects need to implement their own methods
     * @param {*} material
     */
    setSymbol(material: THREE.Material): this;
    setInfoWindow(options: object): this;
    getInfoWindow(): maptalks.ui.InfoWindow;
    openInfoWindow(coordinate: maptalks.Coordinate): this;
    closeInfoWindow(): this;
    removeInfoWindow(): this;
    setToolTip(content: string, options: object): this;
    getToolTip(): maptalks.ui.ToolTip;
    openToolTip(coordinate: maptalks.Coordinate): this;
    closeToolTip(): this;
    removeToolTip(): this;
    /**
     * different components should implement their own animation methods
     * @param {*} options
     * @param {*} cb
     */
    animateShow(options: object, cb: Function): any;
    getMinZoom(): number;
    getMaxZoom(): number;
    isAsynchronous(): boolean;
    fire(eventType: string, param: any): this;
    config(): this;
    setPickObject3d(object3d: THREE.Object3D): this;
    /**
     * more method support
     * @param {*} options
     */
    /**
     *
     * @param {*} options
     */
    _initOptions(options: BaseObjectOptionType): this;
    _createMesh(geometry: THREE.BufferGeometry, material: THREE.Material): this;
    _createGroup(): this;
    _createLine(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial): this;
    _createLine2(geometry: any, material: any): this;
    _createPoints(geometry: THREE.BufferGeometry, material: THREE.PointsMaterial): this;
    _createLineSegments(geometry: THREE.BufferGeometry, material: THREE.LineBasicMaterial | THREE.LineDashedMaterial): this;
    /**
     * rewrite three.js computeLineDistances ,1.7 speed
     * @param geometry
     */
    _computeLineDistances(geometry: THREE.BufferGeometry): void;
}
export default BaseObject;
