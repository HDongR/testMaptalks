import * as maptalks from 'maptalks';
import BaseObject from './BaseObject';
import { ThreeLayer } from './index';
import { getBaseObjectMaterialType, Queue } from './type';
/**
 *
 */
declare class BaseVectorTileLayer extends maptalks.TileLayer {
    _opts: any;
    _layer: ThreeLayer;
    material: THREE.Material;
    getMaterial: getBaseObjectMaterialType;
    _baseObjectKeys: {
        [key: string]: Array<BaseObject>;
    };
    _loadTiles: {
        [key: string]: any;
    };
    _add: boolean;
    _layerLaodTime: number;
    intervalId: any;
    constructor(url: any, options?: {});
    isAsynchronous(): boolean;
    /**
     *get current all baseobject
     */
    getBaseObjects(): BaseObject[];
    /**
   * This method should be overridden for event handling
   * @param {*} type
   * @param {*} e
   */
    onSelectMesh(type: string, e: any): void;
    /**
   * this is can override
   * @param {*} index
   * @param {*} json
   */
    formatBaseObjects(index: string, json: any): BaseObject[];
    loopMessage(q: Queue): void;
    /**
    *
    * @param {*} q
    */
    getTileData(q: Queue): void;
    _getCurentTileKeys(): {
        keys: string[];
        keysMap: {
            [key: string]: boolean;
        };
    };
    _isLoad(): boolean;
    _layerOnLoad(): void;
    _init(): void;
    _workerLoad(e: any): void;
    _generateBaseObjects(index: string, res: any, img: any): void;
    _diffCache(): void;
    _diposeBaseObject(index: string): void;
    _cachetile(index: string, baseobject: BaseObject): void;
    _getXYZOfIndex(index: string): {
        x: number;
        y: number;
        z: number;
    };
    _getTileExtent(x: number, y: number, z: number): maptalks.Extent;
    /**
     *
     * @param {} x
     * @param {*} y
     * @param {*} z
     */
    _getTileLngLatExtent(x: number, y: number, z: number): maptalks.Extent;
}
export default BaseVectorTileLayer;
