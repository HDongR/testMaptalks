{"version":3,"file":"geometry-extrude.js","sources":["../node_modules/earcut/src/earcut.js","../src/simplify.js","../src/math.js","../src/main.js"],"sourcesContent":["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    var filteredBridge = filterPoints(bridge, bridge.next);\n    filterPoints(bridgeReverse, bridgeReverse.next);\n\n    // Check if input node was removed by the filtering\n    return outerNode === bridge ? filteredBridge : outerNode;\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n","/*\r\n (c) 2017, Vladimir Agafonkin\r\n Simplify.js, a high-performance JS polyline simplification library\r\n mourner.github.io/simplify-js\r\n*/\r\n\r\n// to suit your point format, run search/replace for '.x' and '.y';\r\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\r\n\r\n// square distance between 2 points\r\nfunction getSqDist(p1, p2) {\r\n\r\n    var dx = p1[0] - p2[0],\r\n        dy = p1[1] - p2[1];\r\n\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\n// square distance from a point to a segment\r\nfunction getSqSegDist(p, p1, p2) {\r\n\r\n    var x = p1[0],\r\n        y = p1[1],\r\n        dx = p2[0] - x,\r\n        dy = p2[1] - y;\r\n\r\n    if (dx !== 0 || dy !== 0) {\r\n\r\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\r\n\r\n        if (t > 1) {\r\n            x = p2[0];\r\n            y = p2[1];\r\n\r\n        } else if (t > 0) {\r\n            x += dx * t;\r\n            y += dy * t;\r\n        }\r\n    }\r\n\r\n    dx = p[0] - x;\r\n    dy = p[1] - y;\r\n\r\n    return dx * dx + dy * dy;\r\n}\r\n// rest of the code doesn't care about point format\r\n\r\n// basic distance-based simplification\r\nfunction simplifyRadialDist(points, sqTolerance) {\r\n\r\n    var prevPoint = points[0],\r\n        newPoints = [prevPoint],\r\n        point;\r\n\r\n    for (var i = 1, len = points.length; i < len; i++) {\r\n        point = points[i];\r\n\r\n        if (getSqDist(point, prevPoint) > sqTolerance) {\r\n            newPoints.push(point);\r\n            prevPoint = point;\r\n        }\r\n    }\r\n\r\n    if (prevPoint !== point) newPoints.push(point);\r\n\r\n    return newPoints;\r\n}\r\n\r\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\r\n    var maxSqDist = sqTolerance,\r\n        index;\r\n\r\n    for (var i = first + 1; i < last; i++) {\r\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\r\n\r\n        if (sqDist > maxSqDist) {\r\n            index = i;\r\n            maxSqDist = sqDist;\r\n        }\r\n    }\r\n\r\n    if (maxSqDist > sqTolerance) {\r\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\r\n        simplified.push(points[index]);\r\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\r\n    }\r\n}\r\n\r\n// simplification using Ramer-Douglas-Peucker algorithm\r\nfunction simplifyDouglasPeucker(points, sqTolerance) {\r\n    var last = points.length - 1;\r\n\r\n    var simplified = [points[0]];\r\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\r\n    simplified.push(points[last]);\r\n\r\n    return simplified;\r\n}\r\n\r\n// both algorithms combined for awesome performance\r\nfunction simplify(points, tolerance, highestQuality) {\r\n\r\n    if (points.length <= 2) return points;\r\n\r\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\r\n\r\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\r\n    points = simplifyDouglasPeucker(points, sqTolerance);\r\n\r\n    return points;\r\n}\r\nexport default simplify;","export function dot(v1, v2) {\r\n    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];\r\n}\r\nexport function v2Dot(v1, v2) {\r\n    return v1[0] * v2[0] + v1[1] * v2[1];\r\n}\r\n\r\nexport function normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const z = v[2];\r\n    const d = Math.sqrt(x * x + y * y + z * z);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    out[2] = z / d;\r\n    return out;\r\n}\r\n\r\nexport function v2Normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const d = Math.sqrt(x * x + y * y);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    return out;\r\n}\r\n\r\nexport function scale(out, v, s) {\r\n    out[0] = v[0] * s;\r\n    out[1] = v[1] * s;\r\n    out[2] = v[2] * s;\r\n    return out;\r\n}\r\n\r\nexport function mul(out, v1, v2) {\r\n    out[0] = v1[0] * v2[0];\r\n    out[1] = v1[1] * v2[1];\r\n    out[2] = v1[2] * v2[2];\r\n    return out;\r\n}\r\n\r\nexport function scaleAndAdd(out, v1, v2, s) {\r\n    out[0] = v1[0] + v2[0] * s;\r\n    out[1] = v1[1] + v2[1] * s;\r\n    out[2] = v1[2] + v2[2] * s;\r\n    return out;\r\n}\r\n\r\nexport function add(out, v1, v2) {\r\n    out[0] = v1[0] + v2[0];\r\n    out[1] = v1[1] + v2[1];\r\n    out[2] = v1[2] + v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v2Add(out, v1, v2) {\r\n    out[0] = v1[0] + v2[0];\r\n    out[1] = v1[1] + v2[1];\r\n    return out;\r\n}\r\n\r\nexport function sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    out[2] = v1[2] - v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v2Sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    return out;\r\n}\r\n\r\nexport function v3Sub(out, v1, v2) {\r\n    out[0] = v1[0] - v2[0];\r\n    out[1] = v1[1] - v2[1];\r\n    out[2] = v1[2] - v2[2];\r\n    return out;\r\n}\r\n\r\nexport function v3Normalize(out, v) {\r\n    const x = v[0];\r\n    const y = v[1];\r\n    const z = v[2];\r\n    const d = Math.sqrt(x * x + y * y + z * z);\r\n    out[0] = x / d;\r\n    out[1] = y / d;\r\n    out[2] = z / d;\r\n    return out;\r\n}\r\n\r\nexport function v3Cross(out, v1, v2) {\r\n    var ax = v1[0], ay = v1[1], az = v1[2],\r\n        bx = v2[0], by = v2[1], bz = v2[2];\r\n\r\n    out[0] = ay * bz - az * by;\r\n    out[1] = az * bx - ax * bz;\r\n    out[2] = ax * by - ay * bx;\r\n    return out;\r\n}\r\n\r\nconst rel = [];\r\n// start and end must be normalized\r\nexport function slerp(out, start, end, t) {\r\n    // https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\r\n    const cosT = dot(start, end);\r\n    const theta = Math.acos(cosT) * t;\r\n\r\n    scaleAndAdd(rel, end, start, -cosT);\r\n    normalize(rel, rel);// start and rel Orthonormal basis\r\n\r\n    scale(out, start, Math.cos(theta));\r\n    scaleAndAdd(out, out, rel, Math.sin(theta));\r\n\r\n    return out;\r\n}\r\n\r\nexport function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4, out, writeOffset) {\r\n    const dx1 = x2 - x1;\r\n    const dx2 = x4 - x3;\r\n    const dy1 = y2 - y1;\r\n    const dy2 = y4 - y3;\r\n\r\n    const cross = dy2 * dx1 - dx2 * dy1;\r\n    const tmp1 = y1 - y3;\r\n    const tmp2 = x1 - x3;\r\n    const t1 = (dx2 * tmp1 - dy2 * tmp2) / cross;\r\n    // const t2 = (dx1 * tmp1 - dy1 * tmp2) / cross;\r\n\r\n    if (out) {\r\n        writeOffset = writeOffset || 0;\r\n        out[writeOffset] = x1 + t1 * (x2 - x1);\r\n        out[writeOffset + 1] = y1 + t1 * (y2 - y1);\r\n    }\r\n\r\n    return t1;\r\n}\r\n\r\nexport function area(points, start, end) {\r\n    // Signed polygon area\r\n    const n = end - start;\r\n    if (n < 3) {\r\n        return 0;\r\n    }\r\n    let area = 0;\r\n    for (let i = (end - 1) * 2, j = start * 2; j < end * 2;) {\r\n        const x0 = points[i];\r\n        const y0 = points[i + 1];\r\n        const x1 = points[j];\r\n        const y1 = points[j + 1];\r\n        i = j;\r\n        j += 2;\r\n        area += x0 * y1 - x1 * y0;\r\n    }\r\n\r\n    return area;\r\n}\r\n\r\n\r\nexport function triangleArea(x0, y0, x1, y1, x2, y2) {\r\n    return (x1 - x0) * (y2 - y1) - (y1 - y0) * (x2 - x1);\r\n}","// TODO fitRect x, y are negative?\r\n// TODO Extrude dimensions\r\n// TODO bevel=\"top\"|\"bottom\"\r\n// TODO Not add top and bottom vertices if area is 0\r\n\r\nimport earcut from 'earcut';\r\nimport doSimplify from './simplify';\r\nimport {\r\n    slerp, v2Normalize, v2Dot, v2Add, area,\r\n    v3Normalize, v3Sub, v3Cross, lineIntersection\r\n} from './math';\r\n\r\nexport function triangulate(vertices, holes, dimensions = 2) {\r\n    return earcut(vertices, holes, dimensions);\r\n};\r\n\r\nexport function flatten(data) {\r\n    return earcut.flatten(data);\r\n}\r\n\r\nconst v1 = [];\r\nconst v2 = [];\r\nconst v = [];\r\n\r\nfunction innerOffsetPolygon(\r\n    vertices, out, start, end, outStart, offset, miterLimit, close,\r\n    removeIntersections,\r\n    // offsetLines\r\n) {\r\n    const checkMiterLimit = miterLimit != null;\r\n    let cursor = outStart;\r\n    let indicesMap = null;\r\n    if (checkMiterLimit) {\r\n        indicesMap = new Uint32Array(end - start);\r\n    }\r\n    let prevOffsetX;\r\n    let prevOffsetY;\r\n    let prevCursor;\r\n    let tmpIntersection = [];\r\n\r\n    for (let i = start; i < end; i++) {\r\n        const nextIdx = i === end - 1 ? start : i + 1;\r\n        const prevIdx = i === start ? end - 1 : i - 1;\r\n        const x1 = vertices[prevIdx * 2];\r\n        const y1 = vertices[prevIdx * 2 + 1];\r\n        const x2 = vertices[i * 2];\r\n        const y2 = vertices[i * 2 + 1];\r\n        const x3 = vertices[nextIdx * 2];\r\n        const y3 = vertices[nextIdx * 2 + 1];\r\n\r\n        v1[0] = x2 - x1;\r\n        v1[1] = y2 - y1;\r\n        v2[0] = x3 - x2;\r\n        v2[1] = y3 - y2;\r\n\r\n        v2Normalize(v1, v1);\r\n        v2Normalize(v2, v2);\r\n\r\n        checkMiterLimit && (indicesMap[i] = cursor);\r\n\r\n        let needCheckIntersection = false;\r\n        let offsetX;\r\n        let offsetY;\r\n        if (!close && i === start) {\r\n            v[0] = v2[1];\r\n            v[1] = -v2[0];\r\n            v2Normalize(v, v);\r\n            prevOffsetX = out[cursor * 2] = x2 + v[0] * offset;\r\n            prevOffsetY = out[cursor * 2 + 1] = y2 + v[1] * offset;\r\n            prevCursor = cursor;\r\n\r\n            // offsetLines && offsetLines.push([x2, y2, prevOffsetX, prevOffsetY, cursor])\r\n            cursor++;\r\n        }\r\n        else if (!close && i === end - 1) {\r\n            v[0] = v1[1];\r\n            v[1] = -v1[0];\r\n            v2Normalize(v, v);\r\n\r\n            offsetX = x2 + v[0] * offset;\r\n            offsetY = y2 + v[1] * offset;\r\n\r\n            needCheckIntersection = true;\r\n        }\r\n        else {\r\n            // PENDING Why using sub will lost the direction info.\r\n            v2Add(v, v2, v1);\r\n            const tmp = v[1];\r\n            v[1] = -v[0];\r\n            v[0] = tmp;\r\n\r\n            v2Normalize(v, v);\r\n\r\n            const cosA = v2Dot(v, v2);\r\n            const sinA = Math.sqrt(1 - cosA * cosA);\r\n            // PENDING\r\n            // Make sure it's offset lines instead of vertices.\r\n            const miter = offset * Math.min(10, 1 / sinA);\r\n\r\n            const isCovex = offset * cosA < 0;\r\n\r\n            if (checkMiterLimit && (1 / sinA) > miterLimit && isCovex) {\r\n                // No need to check line intersection on the outline.\r\n                const mx = x2 + v[0] * offset;\r\n                const my = y2 + v[1] * offset;\r\n                const halfA = Math.acos(sinA) / 2;\r\n                const dist = Math.tan(halfA) * Math.abs(offset);\r\n                out[cursor * 2] = mx + v[1] * dist;\r\n                out[cursor * 2 + 1] = my - v[0] * dist;\r\n                cursor++;\r\n                out[cursor * 2] = mx - v[1] * dist;\r\n                out[cursor * 2 + 1] = my + v[0] * dist;\r\n                cursor++;\r\n            }\r\n            else {\r\n                offsetX = x2 + v[0] * miter;\r\n                offsetY = y2 + v[1] * miter;\r\n                needCheckIntersection = true;\r\n            }\r\n\r\n            if (needCheckIntersection) {\r\n                // TODO Handle with whole.\r\n                if (removeIntersections && prevOffsetX != null) {\r\n                    // Greedy, only check with previous offset line\r\n                    // PENDING: Is it necessary to check with other lines?\r\n                    const t = lineIntersection(\r\n                        x1, y1, prevOffsetX, prevOffsetY,\r\n                        x2, y2, offsetX, offsetY, tmpIntersection, 0\r\n                    );\r\n                    // Use a eplison\r\n                    if (t >= -1e-2 && t <= 1 + 1e-2) {\r\n                        // Update previous offset points.\r\n                        out[prevCursor * 2] = offsetX = tmpIntersection[0];\r\n                        out[prevCursor * 2 + 1] = offsetY = tmpIntersection[1];\r\n                    }\r\n                }\r\n\r\n                prevOffsetX = out[cursor * 2] = offsetX;\r\n                prevOffsetY = out[cursor * 2 + 1] = offsetY;\r\n                prevCursor = cursor;\r\n\r\n                // offsetLines && offsetLines.push([x2, y2, offsetX, offsetY, cursor])\r\n\r\n                cursor++;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return indicesMap;\r\n}\r\n\r\n\r\n\r\nfunction innerOffsetPolyline(\r\n    vertices, out, start, end, outStart, offset, miterLimit, close\r\n) {\r\n    const checkMiterLimit = miterLimit != null;\r\n    let outOff = outStart;\r\n    let indicesMap = null;\r\n    if (checkMiterLimit) {\r\n        indicesMap = new Uint32Array(end - start);\r\n    }\r\n    for (let i = start; i < end; i++) {\r\n        const nextIdx = i === end - 1 ? start : i + 1;\r\n        const prevIdx = i === start ? end - 1 : i - 1;\r\n        const x1 = vertices[prevIdx * 2];\r\n        const y1 = vertices[prevIdx * 2 + 1];\r\n        const x2 = vertices[i * 2];\r\n        const y2 = vertices[i * 2 + 1];\r\n        const x3 = vertices[nextIdx * 2];\r\n        const y3 = vertices[nextIdx * 2 + 1];\r\n\r\n        v1[0] = x2 - x1;\r\n        v1[1] = y2 - y1;\r\n        v2[0] = x3 - x2;\r\n        v2[1] = y3 - y2;\r\n\r\n        v2Normalize(v1, v1);\r\n        v2Normalize(v2, v2);\r\n\r\n        checkMiterLimit && (indicesMap[i] = outOff);\r\n        if (!close && i === start) {\r\n            v[0] = v2[1];\r\n            v[1] = -v2[0];\r\n            v2Normalize(v, v);\r\n            out[outOff * 2] = x2 + v[0] * offset;\r\n            out[outOff * 2 + 1] = y2 + v[1] * offset;\r\n            outOff++;\r\n        }\r\n        else if (!close && i === end - 1) {\r\n            v[0] = v1[1];\r\n            v[1] = -v1[0];\r\n            v2Normalize(v, v);\r\n            out[outOff * 2] = x2 + v[0] * offset;\r\n            out[outOff * 2 + 1] = y2 + v[1] * offset;\r\n            outOff++;\r\n        }\r\n        else {\r\n            // PENDING Why using sub will lost the direction info.\r\n            v2Add(v, v2, v1);\r\n            const tmp = v[1];\r\n            v[1] = -v[0];\r\n            v[0] = tmp;\r\n\r\n            v2Normalize(v, v);\r\n\r\n            const cosA = v2Dot(v, v2);\r\n            const sinA = Math.sqrt(1 - cosA * cosA);\r\n            // PENDING\r\n            const miter = offset * Math.min(10, 1 / sinA);\r\n\r\n            const isCovex = offset * cosA < 0;\r\n\r\n            if (checkMiterLimit && (1 / sinA) > miterLimit && isCovex) {\r\n                const mx = x2 + v[0] * offset;\r\n                const my = y2 + v[1] * offset;\r\n                const halfA = Math.acos(sinA) / 2;\r\n                const dist = Math.tan(halfA) * Math.abs(offset);\r\n                out[outOff * 2] = mx + v[1] * dist;\r\n                out[outOff * 2 + 1] = my - v[0] * dist;\r\n                outOff++;\r\n                out[outOff * 2] = mx - v[1] * dist;\r\n                out[outOff * 2 + 1] = my + v[0] * dist;\r\n                outOff++;\r\n            }\r\n            else {\r\n                out[outOff * 2] = x2 + v[0] * miter;\r\n                out[outOff * 2 + 1] = y2 + v[1] * miter;\r\n                outOff++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return indicesMap;\r\n}\r\n\r\nexport function offsetPolygon(vertices, holes, offset, miterLimit, close) {\r\n    const offsetVertices = miterLimit != null ? [] : new Float32Array(vertices.length);\r\n    const exteriorSize = (holes && holes.length) ? holes[0] : vertices.length / 2;\r\n\r\n    const offsetLines = [];\r\n\r\n    innerOffsetPolygon(\r\n        vertices, offsetVertices, 0, exteriorSize, 0, offset, miterLimit, close, true\r\n    );\r\n\r\n    if (holes) {\r\n        for (let i = 0; i < holes.length; i++) {\r\n            const start = holes[i];\r\n            const end = holes[i + 1] || vertices.length / 2;\r\n            innerOffsetPolygon(\r\n                vertices, offsetVertices, start, end,\r\n                miterLimit != null ? offsetVertices.length / 2 : start,\r\n                offset, miterLimit, close, false\r\n            );\r\n        }\r\n    }\r\n\r\n    // TODO holes\r\n    // Remove intersections of offseted polygon\r\n    // let len = offsetLines.length;\r\n    // let tmpIntersection = [];\r\n    // for (let i = 0; i < len; i++) {\r\n    //     const line1 = offsetLines[i];\r\n    //     for (let k = i + 1; k < len; k++) {\r\n    //         const line2 = offsetLines[k];\r\n\r\n    //         const t = lineIntersection(\r\n    //             line1[0], line1[1], line1[2], line1[3],\r\n    //             line2[0], line2[1], line2[2], line2[3], tmpIntersection, 0\r\n    //         );\r\n    //         // Use a eplison\r\n    //         if (t >= -1e-2 && t <= 1 + 1e-2) {\r\n    //             const cursor1 = line1[4] * 2;\r\n    //             const cursor2 = line2[4] * 2;\r\n    //             // Update\r\n    //             offsetVertices[cursor1] = offsetVertices[cursor2] = line1[2] = line2[2] = tmpIntersection[0];\r\n    //             offsetVertices[cursor1 + 1] = offsetVertices[cursor2 + 1] = line1[3] = line2[3]= tmpIntersection[1];\r\n    //         }\r\n    //     }\r\n    // }\r\n    return offsetVertices;\r\n}\r\n\r\nfunction reversePoints(points, stride, start, end) {\r\n    for (let i = 0; i < Math.floor((end - start) / 2); i++) {\r\n        for (let j = 0; j < stride; j++) {\r\n            const a = (i + start) * stride + j;\r\n            const b = (end - i - 1) * stride + j;\r\n            const tmp = points[a];\r\n            points[a] = points[b];\r\n            points[b] = tmp;\r\n        }\r\n    }\r\n\r\n    return points;\r\n}\r\n\r\nfunction convertToClockwise(vertices, holes) {\r\n    let polygonVertexCount = vertices.length / 2;\r\n    let start = 0;\r\n    let end = holes && holes.length ? holes[0] : polygonVertexCount;\r\n    if (area(vertices, start, end) > 0) {\r\n        reversePoints(vertices, 2, start, end);\r\n    }\r\n    for (let h = 1; h < (holes ? holes.length : 0) + 1; h++) {\r\n        start = holes[h - 1];\r\n        end = holes[h] || polygonVertexCount;\r\n        if (area(vertices, start, end) < 0) {\r\n            reversePoints(vertices, 2, start, end);\r\n        }\r\n    }\r\n}\r\n\r\nfunction normalizeOpts(opts) {\r\n\r\n    opts.depth = opts.depth || 1;\r\n    opts.bevelSize = opts.bevelSize || 0;\r\n    opts.bevelSegments = opts.bevelSegments == null ? 2 : opts.bevelSegments;\r\n    opts.smoothBevel = opts.smoothBevel || false;\r\n    opts.simplify = opts.simplify || 0;\r\n\r\n    if (opts.smoothSide == null) {\r\n        opts.smoothSide = 'auto'\r\n    }\r\n    if (opts.smoothSideThreshold == null) {\r\n        opts.smoothSideThreshold = 0.9\r\n    }\r\n\r\n    // Normalize bevel options.\r\n    if (typeof opts.depth === 'number') {\r\n        opts.bevelSize = Math.min(!(opts.bevelSegments > 0) ? 0 : opts.bevelSize, opts.depth / 2);\r\n    }\r\n    if (!(opts.bevelSize > 0)) {\r\n        opts.bevelSegments = 0;\r\n    }\r\n    opts.bevelSegments = Math.round(opts.bevelSegments);\r\n\r\n    const boundingRect = opts.boundingRect;\r\n    opts.translate = opts.translate || [0, 0];\r\n    opts.scale = opts.scale || [1, 1];\r\n    if (opts.fitRect) {\r\n        let targetX = opts.fitRect.x == null\r\n            ? (boundingRect.x || 0)\r\n            : opts.fitRect.x;\r\n        let targetY = opts.fitRect.y == null\r\n            ? (boundingRect.y || 0)\r\n            : opts.fitRect.y;\r\n        let targetWidth = opts.fitRect.width;\r\n        let targetHeight = opts.fitRect.height;\r\n        if (targetWidth == null) {\r\n            if (targetHeight != null) {\r\n                targetWidth = targetHeight / boundingRect.height * boundingRect.width;\r\n            }\r\n            else {\r\n                targetWidth = boundingRect.width;\r\n                targetHeight = boundingRect.height;\r\n            }\r\n        }\r\n        else if (targetHeight == null) {\r\n            targetHeight = targetWidth / boundingRect.width * boundingRect.height;\r\n        }\r\n        opts.scale = [\r\n            targetWidth / boundingRect.width,\r\n            targetHeight / boundingRect.height\r\n        ];\r\n        opts.translate = [\r\n            (targetX - boundingRect.x) * opts.scale[0],\r\n            (targetY - boundingRect.y) * opts.scale[1]\r\n        ];\r\n    }\r\n}\r\n\r\nfunction generateNormal(indices, position) {\r\n\r\n    function v3Set(p, a, b, c) {\r\n        p[0] = a; p[1] = b; p[2] = c;\r\n    }\r\n\r\n    const p1 = [];\r\n    const p2 = [];\r\n    const p3 = [];\r\n\r\n    const v21 = [];\r\n    const v32 = [];\r\n\r\n    const n = [];\r\n\r\n    const len = indices.length;\r\n    const normals = new Float32Array(position.length);\r\n\r\n    for (let f = 0; f < len;) {\r\n        const i1 = indices[f++] * 3;\r\n        const i2 = indices[f++] * 3;\r\n        const i3 = indices[f++] * 3;\r\n\r\n        v3Set(p1, position[i1], position[i1 + 1], position[i1 + 2]);\r\n        v3Set(p2, position[i2], position[i2 + 1], position[i2 + 2]);\r\n        v3Set(p3, position[i3], position[i3 + 1], position[i3 + 2]);\r\n\r\n        v3Sub(v21, p1, p2);\r\n        v3Sub(v32, p2, p3);\r\n        v3Cross(n, v21, v32);\r\n        // Already be weighted by the triangle area\r\n        for (let i = 0; i < 3; i++) {\r\n            normals[i1 + i] = normals[i1 + i] + n[i];\r\n            normals[i2 + i] = normals[i2 + i] + n[i];\r\n            normals[i3 + i] = normals[i3 + i] + n[i];\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i < normals.length;) {\r\n        v3Set(n, normals[i], normals[i + 1], normals[i + 2]);\r\n        v3Normalize(n, n);\r\n        normals[i++] = n[0];\r\n        normals[i++] = n[1];\r\n        normals[i++] = n[2];\r\n\r\n    }\r\n\r\n    return normals;\r\n}\r\n// 0,0----1,0\r\n// 0,1----1,1\r\nconst quadToTriangle = [\r\n    [0, 0], [1, 0], [1, 1],\r\n    [0, 0], [1, 1], [0, 1]\r\n];\r\n\r\nfunction ringDistance(vertices, start, end) {\r\n    let distance = 0;\r\n    let preX = vertices[start], preY = vertices[start + 1];\r\n    const firstX = preX, firstY = preY;\r\n    for (let i = start + 2; i < end; i += 2) {\r\n        const x = vertices[i], y = vertices[i + 1];\r\n        distance += Math.sqrt((x - preX) * (x - preX) + (y - preY) * (y - preY));\r\n        preX = x;\r\n        preY = y;\r\n    }\r\n    distance += Math.sqrt((preX - firstX) * (preX - firstX) + (preY - firstY) * (preY - firstY));\r\n    return distance;\r\n}\r\n\r\n// Add side vertices and indices. Include bevel.\r\nfunction addExtrudeSide(\r\n    out, { vertices, topVertices, splittedMap, depth, rect }, start, end,\r\n    cursors, opts\r\n) {\r\n    const ringVertexCount = end - start;\r\n\r\n    const splitBevel = opts.smoothBevel ? 1 : 2;\r\n    const bevelSize = Math.min(depth / 2, opts.bevelSize);\r\n    const bevelSegments = opts.bevelSegments;\r\n    const vertexOffset = cursors.vertex;\r\n    const ringPerimeter = cursors.ringPerimeter;\r\n    const size = Math.max(rect.width, rect.height, depth, ringPerimeter);\r\n\r\n    function isDuplicateVertex(idx) {\r\n        const nextIdx = (idx + 1) % ringVertexCount;\r\n        const x0 = vertices[idx * 2];\r\n        const y0 = vertices[idx * 2 + 1];\r\n        const x1 = vertices[nextIdx * 2];\r\n        const y1 = vertices[nextIdx * 2 + 1];\r\n        return x0 === x1 && y0 === y1;\r\n    }\r\n\r\n    // Side vertices\r\n    if (bevelSize > 0) {\r\n        const v0 = [0, 0, 1];\r\n        const v1 = [];\r\n        const v2 = [0, 0, -1];\r\n        const v = [];\r\n\r\n        let ringCount = 0;\r\n        let vLen = new Float32Array(ringVertexCount);\r\n        for (let k = 0; k < 2; k++) {\r\n            const z = (k === 0 ? (depth - bevelSize) : bevelSize);\r\n            for (let s = 0; s <= bevelSegments * splitBevel; s++) {\r\n                let uLen = 0;\r\n                let prevX;\r\n                let prevY;\r\n                for (let i = 0; i < ringVertexCount; i++) {\r\n                    const idx = (i % ringVertexCount + start) * 2;\r\n                    const rawIdx = splittedMap ? splittedMap[idx / 2] * 2 : idx;\r\n                    v1[0] = vertices[idx] - topVertices[rawIdx];\r\n                    v1[1] = vertices[idx + 1] - topVertices[rawIdx + 1];\r\n                    v1[2] = 0;\r\n                    const l = Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1]);\r\n                    v1[0] /= l;\r\n                    v1[1] /= l;\r\n\r\n                    const t = (Math.floor(s / splitBevel) + (s % splitBevel)) / bevelSegments;\r\n                    k === 0 ? slerp(v, v0, v1, t)\r\n                        : slerp(v, v1, v2, t);\r\n\r\n                    const t2 = k === 0 ? t : 1 - t;\r\n                    const a = bevelSize * Math.sin(t2 * Math.PI / 2);\r\n                    const b = l * Math.cos(t2 * Math.PI / 2);\r\n\r\n                    // ellipse radius\r\n                    const r = bevelSize * l / Math.sqrt(a * a + b * b);\r\n\r\n                    const x = v[0] * r + topVertices[rawIdx];\r\n                    const y = v[1] * r + topVertices[rawIdx + 1];\r\n                    const zz = v[2] * r + z;\r\n                    out.position[cursors.vertex * 3] = x;\r\n                    out.position[cursors.vertex * 3 + 1] = y;\r\n                    out.position[cursors.vertex * 3 + 2] = zz;\r\n\r\n                    // TODO Cache and optimize\r\n                    if (i > 0) {\r\n                        uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\r\n                    }\r\n                    if (s > 0 || k > 0) {\r\n                        let tmp = (cursors.vertex - ringVertexCount) * 3;\r\n                        let prevX2 = out.position[tmp];\r\n                        let prevY2 = out.position[tmp + 1];\r\n                        let prevZ2 = out.position[tmp + 2];\r\n\r\n                        vLen[i] += Math.sqrt(\r\n                            (prevX2 - x) * (prevX2 - x)\r\n                            + (prevY2 - y) * (prevY2 - y)\r\n                            + (prevZ2 - zz) * (prevZ2 - zz)\r\n                        );\r\n                    }\r\n                    out.uv[cursors.vertex * 2] = uLen / size;\r\n                    out.uv[cursors.vertex * 2 + 1] = vLen[i] / size;\r\n\r\n                    prevX = x;\r\n                    prevY = y;\r\n                    cursors.vertex++;\r\n\r\n                    // Just ignore this face if vertex are duplicted in `splitVertices`\r\n                    if (isDuplicateVertex(i)) {\r\n                        continue;\r\n                    }\r\n                    if ((splitBevel > 1 && (s % splitBevel)) || (splitBevel === 1 && s >= 1)) {\r\n                        for (let f = 0; f < 6; f++) {\r\n                            const m = (quadToTriangle[f][0] + i) % ringVertexCount;\r\n                            const n = quadToTriangle[f][1] + ringCount;\r\n                            out.indices[cursors.index++] = (n - 1) * ringVertexCount + m + vertexOffset;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                ringCount++;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let k = 0; k < 2; k++) {\r\n            const z = k === 0 ? depth - bevelSize : bevelSize;\r\n            let uLen = 0;\r\n            let prevX;\r\n            let prevY;\r\n            for (let i = 0; i < ringVertexCount; i++) {\r\n                const idx = (i % ringVertexCount + start) * 2;\r\n                const x = vertices[idx];\r\n                const y = vertices[idx + 1];\r\n                out.position[cursors.vertex * 3] = x;\r\n                out.position[cursors.vertex * 3 + 1] = y;\r\n                out.position[cursors.vertex * 3 + 2] = z;\r\n                if (i > 0) {\r\n                    uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\r\n                }\r\n                out.uv[cursors.vertex * 2] = uLen / size;\r\n                out.uv[cursors.vertex * 2 + 1] = z / size;\r\n                prevX = x;\r\n                prevY = y;\r\n\r\n                cursors.vertex++;\r\n            }\r\n        }\r\n    }\r\n    // Connect the side\r\n    const sideStartRingN = bevelSize > 0 ? (bevelSegments * splitBevel + 1) : 1;\r\n    for (let i = 0; i < ringVertexCount; i++) {\r\n        // Just ignore this face if vertex are duplicted in `splitVertices`\r\n        if (isDuplicateVertex(i)) {\r\n            continue;\r\n        }\r\n        for (let f = 0; f < 6; f++) {\r\n            const m = (quadToTriangle[f][0] + i) % ringVertexCount;\r\n            const n = quadToTriangle[f][1] + sideStartRingN;\r\n            out.indices[cursors.index++] = (n - 1) * ringVertexCount + m + vertexOffset;\r\n        }\r\n    }\r\n}\r\n\r\nfunction addTopAndBottom({ indices, topVertices, rect, depth }, out, cursors, opts) {\r\n    if (topVertices.length <= 4) {\r\n        return;\r\n    }\r\n\r\n    const vertexOffset = cursors.vertex;\r\n    // Top indices\r\n    const indicesLen = indices.length;\r\n    for (let i = 0; i < indicesLen; i++) {\r\n        out.indices[cursors.index++] = vertexOffset + indices[i];\r\n    }\r\n    const size = Math.max(rect.width, rect.height);\r\n    // Top and bottom vertices\r\n    for (let k = 0; k < (opts.excludeBottom ? 1 : 2); k++) {\r\n        for (let i = 0; i < topVertices.length; i += 2) {\r\n            const x = topVertices[i];\r\n            const y = topVertices[i + 1];\r\n            out.position[cursors.vertex * 3] = x;\r\n            out.position[cursors.vertex * 3 + 1] = y;\r\n            out.position[cursors.vertex * 3 + 2] = (1 - k) * depth;\r\n\r\n            out.uv[cursors.vertex * 2] = (x - rect.x) / size;\r\n            out.uv[cursors.vertex * 2 + 1] = (y - rect.y) / size;\r\n            cursors.vertex++;\r\n        }\r\n    }\r\n    // Bottom indices\r\n    if (!opts.excludeBottom) {\r\n        const vertexCount = topVertices.length / 2;\r\n        for (let i = 0; i < indicesLen; i += 3) {\r\n            for (let k = 0; k < 3; k++) {\r\n                out.indices[cursors.index++] = vertexOffset + vertexCount + indices[i + 2 - k];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Split vertices for sharp side.\r\n */\r\nfunction splitVertices(vertices, holes, smoothSide, smoothSideThreshold) {\r\n    const isAutoSmooth = smoothSide == null || smoothSide === 'auto';\r\n    if (smoothSide === true) {\r\n        return { vertices, holes };\r\n    }\r\n    const newVertices = [];\r\n    const newHoles = holes && [];\r\n    const count = vertices.length / 2;\r\n    const v1 = [];\r\n    const v2 = [];\r\n\r\n    // Map of splitted index to raw index\r\n    const splittedMap = [];\r\n\r\n    let start = 0;\r\n    let end = 0;\r\n\r\n    const polysCount = (holes ? holes.length : 0) + 1;\r\n    for (let h = 0; h < polysCount; h++) {\r\n        if (h === 0) {\r\n            end = holes && holes.length ? holes[0] : count;\r\n        }\r\n        else {\r\n            start = holes[h - 1];\r\n            end = holes[h] || count;\r\n        }\r\n\r\n        for (let i = start; i < end; i++) {\r\n            const x2 = vertices[i * 2];\r\n            const y2 = vertices[i * 2 + 1];\r\n            const nextIdx = i === end - 1 ? start : i + 1;\r\n            const x3 = vertices[nextIdx * 2];\r\n            const y3 = vertices[nextIdx * 2 + 1];\r\n\r\n            if (isAutoSmooth) {\r\n                const prevIdx = i === start ? end - 1 : i - 1;\r\n                const x1 = vertices[prevIdx * 2];\r\n                const y1 = vertices[prevIdx * 2 + 1];\r\n\r\n                v1[0] = x1 - x2;\r\n                v1[1] = y1 - y2;\r\n                v2[0] = x3 - x2;\r\n                v2[1] = y3 - y2;\r\n\r\n                v2Normalize(v1, v1);\r\n                v2Normalize(v2, v2);\r\n\r\n                const angleCos = v2Dot(v1, v2) * 0.5 + 0.5;\r\n\r\n                if ((1 - angleCos) > smoothSideThreshold) {\r\n                    newVertices.push(x2, y2);\r\n                    splittedMap.push(i);\r\n                }\r\n                else {\r\n                    newVertices.push(x2, y2, x2, y2);\r\n                    splittedMap.push(i, i);\r\n                }\r\n            }\r\n            else {\r\n                newVertices.push(x2, y2, x2, y2);\r\n                splittedMap.push(i, i);\r\n            }\r\n        }\r\n\r\n        if (h < polysCount - 1 && newHoles) {\r\n            newHoles.push(newVertices.length / 2);\r\n        }\r\n    }\r\n\r\n    return {\r\n        vertices: new Float32Array(newVertices),\r\n        splittedMap,\r\n        holes: newHoles\r\n    };\r\n}\r\n\r\nfunction innerExtrudeTriangulatedPolygon(preparedData, opts) {\r\n    let indexCount = 0;\r\n    let vertexCount = 0;\r\n\r\n    for (let p = 0; p < preparedData.length; p++) {\r\n        const { indices, vertices, splittedMap, topVertices, depth } = preparedData[p];\r\n        const bevelSize = Math.min(depth / 2, opts.bevelSize);\r\n        const bevelSegments = !(bevelSize > 0) ? 0 : opts.bevelSegments;\r\n\r\n        const holes = preparedData[p].holes || [];\r\n\r\n        indexCount += indices.length * (opts.excludeBottom ? 1 : 2);\r\n        vertexCount += topVertices.length / 2 * (opts.excludeBottom ? 1 : 2);\r\n        const ringCount = 2 + bevelSegments * 2;\r\n\r\n        let start = 0;\r\n        let end = 0;\r\n        for (let h = 0; h < holes.length + 1; h++) {\r\n            if (h === 0) {\r\n                end = holes.length ? holes[0] : vertices.length / 2;\r\n            }\r\n            else {\r\n                start = holes[h - 1];\r\n                end = holes[h] || vertices.length / 2;\r\n            }\r\n\r\n            const faceEnd = splittedMap ? splittedMap[end - 1] + 1 : end;\r\n            const faceStart = splittedMap ? splittedMap[start] : start;\r\n            indexCount += (faceEnd - faceStart) * 6 * (ringCount - 1);\r\n\r\n            const sideRingVertexCount = end - start;\r\n            vertexCount += sideRingVertexCount * ringCount\r\n                // Double the bevel vertex number if not smooth\r\n                + (!opts.smoothBevel ? bevelSegments * sideRingVertexCount * 2 : 0);\r\n        }\r\n    }\r\n\r\n    const data = {\r\n        position: new Float32Array(vertexCount * 3),\r\n        indices: new (vertexCount > 0xffff ? Uint32Array : Uint16Array)(indexCount),\r\n        uv: new Float32Array(vertexCount * 2)\r\n    };\r\n\r\n    const cursors = {\r\n        vertex: 0, index: 0, ringPerimeter: 0\r\n    };\r\n\r\n    for (let d = 0; d < preparedData.length; d++) {\r\n        addTopAndBottom(preparedData[d], data, cursors, opts);\r\n    }\r\n\r\n    for (let d = 0; d < preparedData.length; d++) {\r\n        const { holes, vertices } = preparedData[d];\r\n        const vertexCount = vertices.length / 2;\r\n\r\n        let start = 0;\r\n        let end = (holes && holes.length) ? holes[0] : vertexCount;\r\n        cursors.ringPerimeter = ringDistance(preparedData[d].topVertices, start, end);\r\n        // Add exterior\r\n        addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\r\n        // Add holes\r\n        if (holes) {\r\n            for (let h = 0; h < holes.length; h++) {\r\n                start = holes[h];\r\n                end = holes[h + 1] || vertexCount;\r\n                cursors.ringPerimeter = ringDistance(preparedData[d].topVertices, start, end);\r\n                addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Wrap uv\r\n    for (let i = 0; i < data.uv.length; i++) {\r\n        const val = data.uv[i];\r\n        if (val > 0 && Math.round(val) === val) {\r\n            data.uv[i] = 1;\r\n        }\r\n        else {\r\n            data.uv[i] = val % 1;\r\n        }\r\n    }\r\n\r\n    data.normal = generateNormal(data.indices, data.position);\r\n    // PENDING\r\n    data.boundingRect = preparedData[0] && preparedData[0].rect;\r\n\r\n    return data;\r\n}\r\n\r\nfunction convertPolylineToTriangulatedPolygon(polyline, polylineIdx, opts) {\r\n    const lineWidth = opts.lineWidth;\r\n    const pointCount = polyline.length;\r\n    const points = new Float32Array(pointCount * 2);\r\n    const translate = opts.translate || [0, 0];\r\n    const scale = opts.scale || [1, 1];\r\n    for (let i = 0, k = 0; i < pointCount; i++) {\r\n        points[k++] = polyline[i][0] * scale[0] + translate[0];\r\n        points[k++] = polyline[i][1] * scale[1] + translate[1];\r\n    }\r\n\r\n    if (area(points, 0, pointCount) < 0) {\r\n        reversePoints(points, 2, 0, pointCount);\r\n    }\r\n\r\n    const insidePoints = [];\r\n    const outsidePoints = [];\r\n    const miterLimit = opts.miterLimit;\r\n    const outsideIndicesMap = innerOffsetPolyline(\r\n        points, outsidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false, true\r\n    );\r\n    reversePoints(points, 2, 0, pointCount);\r\n    const insideIndicesMap = innerOffsetPolyline(\r\n        points, insidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false, true\r\n    );\r\n\r\n    const polygonVertexCount = (insidePoints.length + outsidePoints.length) / 2;\r\n    const polygonVertices = new Float32Array(polygonVertexCount * 2);\r\n\r\n    let offset = 0;\r\n    const outsidePointCount = outsidePoints.length / 2;\r\n    for (let i = 0; i < outsidePoints.length; i++) {\r\n        polygonVertices[offset++] = outsidePoints[i];\r\n    }\r\n    for (let i = 0; i < insidePoints.length; i++) {\r\n        polygonVertices[offset++] = insidePoints[i];\r\n    }\r\n\r\n    // Built indices\r\n    const indices = new (polygonVertexCount > 0xffff ? Uint32Array : Uint16Array)(\r\n        ((pointCount - 1) * 2 + (polygonVertexCount - pointCount * 2)) * 3\r\n    );\r\n    let off = 0;\r\n    for (let i = 0; i < pointCount - 1; i++) {\r\n        const i2 = i + 1;\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i] - 1;\r\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n\r\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\r\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n        indices[off++] = insideIndicesMap[i] + outsidePointCount;\r\n\r\n        if (insideIndicesMap[i2] - insideIndicesMap[i] === 2) {\r\n            indices[off++] = insideIndicesMap[i] + 2 + outsidePointCount;\r\n            indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\r\n            indices[off++] = outsidePointCount - outsideIndicesMap[i2] - 1;\r\n        }\r\n        else if (outsideIndicesMap[i2] - outsideIndicesMap[i] === 2) {\r\n            indices[off++] = insideIndicesMap[i2] + outsidePointCount;\r\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 1);\r\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 2);\r\n        }\r\n    }\r\n\r\n    const topVertices = opts.bevelSize > 0\r\n        ? offsetPolygon(polygonVertices, [], opts.bevelSize, null, true) : polygonVertices;\r\n    const boundingRect = opts.boundingRect;\r\n\r\n    const res = splitVertices(polygonVertices, null, opts.smoothSide, opts.smoothSideThreshold);\r\n    return {\r\n        vertices: res.vertices,\r\n        rawVertices: topVertices,\r\n        splittedMap: res.splittedMap,\r\n        indices,\r\n        topVertices,\r\n        rect: {\r\n            x: boundingRect.x * scale[0] + translate[0],\r\n            y: boundingRect.y * scale[1] + translate[1],\r\n            width: boundingRect.width * scale[0],\r\n            height: boundingRect.height * scale[1],\r\n        },\r\n        depth: typeof opts.depth === 'function' ? opts.depth(polylineIdx) : opts.depth,\r\n        holes: []\r\n    };\r\n}\r\n\r\nfunction removeClosePointsOfPolygon(polygon, epsilon) {\r\n    const newPolygon = [];\r\n    for (let k = 0; k < polygon.length; k++) {\r\n        const points = polygon[k];\r\n        const newPoints = [];\r\n        const len = points.length;\r\n        let x1 = points[len - 1][0];\r\n        let y1 = points[len - 1][1];\r\n        let dist = 0;\r\n        for (let i = 0; i < len; i++) {\r\n            let x2 = points[i][0];\r\n            let y2 = points[i][1];\r\n            const dx = x2 - x1;\r\n            const dy = y2 - y1;\r\n            dist += Math.sqrt(dx * dx + dy * dy);\r\n            if (dist > epsilon) {\r\n                newPoints.push(points[i]);\r\n                dist = 0;\r\n            }\r\n            x1 = x2;\r\n            y1 = y2;\r\n        }\r\n        if (newPoints.length >= 3) {\r\n            newPolygon.push(newPoints);\r\n        }\r\n    }\r\n    return newPolygon.length > 0 ? newPolygon : null;\r\n}\r\n\r\nfunction simplifyPolygon(polygon, tolerance) {\r\n    const newPolygon = [];\r\n    for (let k = 0; k < polygon.length; k++) {\r\n        let points = polygon[k];\r\n        points = doSimplify(points, tolerance, true);\r\n        if (points.length >= 3) {\r\n            newPolygon.push(points);\r\n        }\r\n    }\r\n    return newPolygon.length > 0 ? newPolygon : null;\r\n}\r\n/**\r\n *\r\n * @param {Array} polygons Polygons array that match GeoJSON MultiPolygon geometry.\r\n * @param {Object} [opts]\r\n * @param {number|Function} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = 'auto']\r\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n *\r\n * @return {Object} {indices, position, uv, normal, boundingRect}\r\n */\r\nexport function extrudePolygon(polygons, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n    for (let i = 0; i < polygons.length; i++) {\r\n        updateBoundingRect(polygons[i][0], min, max);\r\n    }\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    normalizeOpts(opts);\r\n\r\n    const preparedData = [];\r\n    const translate = opts.translate || [0, 0];\r\n    const scale = opts.scale || [1, 1];\r\n    const boundingRect = opts.boundingRect;\r\n    const transformdRect = {\r\n        x: boundingRect.x * scale[0] + translate[0],\r\n        y: boundingRect.y * scale[1] + translate[1],\r\n        width: boundingRect.width * scale[0],\r\n        height: boundingRect.height * scale[1],\r\n    };\r\n\r\n    const epsilon = Math.min(\r\n        boundingRect.width, boundingRect.height\r\n    ) / 1e5;\r\n    for (let i = 0; i < polygons.length; i++) {\r\n        let newPolygon = removeClosePointsOfPolygon(polygons[i], epsilon);\r\n        if (!newPolygon) {\r\n            continue;\r\n        }\r\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\r\n        if (simplifyTolerance > 0) {\r\n            newPolygon = simplifyPolygon(newPolygon, simplifyTolerance);\r\n        }\r\n        if (!newPolygon) {\r\n            continue;\r\n        }\r\n\r\n        const { vertices, holes, dimensions } = earcut.flatten(newPolygon);\r\n\r\n        for (let k = 0; k < vertices.length;) {\r\n            vertices[k] = vertices[k++] * scale[0] + translate[0];\r\n            vertices[k] = vertices[k++] * scale[1] + translate[1];\r\n        }\r\n\r\n        convertToClockwise(vertices, holes);\r\n\r\n        if (dimensions !== 2) {\r\n            throw new Error('Only 2D polygon points are supported');\r\n        }\r\n        const topVertices = opts.bevelSize > 0\r\n            ? offsetPolygon(vertices, holes, opts.bevelSize, null, true) : vertices;\r\n        const indices = triangulate(topVertices, holes, dimensions);\r\n        const res = splitVertices(vertices, holes, opts.smoothSide, opts.smoothSideThreshold)\r\n\r\n        preparedData.push({\r\n            indices,\r\n            vertices: res.vertices,\r\n            rawVertices: vertices,\r\n            topVertices,\r\n            holes: res.holes,\r\n            splittedMap: res.splittedMap,\r\n            rect: transformdRect,\r\n            depth: typeof opts.depth === 'function' ? opts.depth(i) : opts.depth\r\n        });\r\n    }\r\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\r\n};\r\n\r\n/**\r\n *\r\n * @param {Array} polylines Polylines array that match GeoJSON MultiLineString geometry.\r\n * @param {Object} [opts]\r\n * @param {number} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = 'auto']\r\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {boolean} [opts.lineWidth = 1]\r\n * @param {boolean} [opts.miterLimit = 2]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n * @param {Object} [opts.boundingRect]\r\n * @return {Object} {indices, position, uv, normal, boundingRect}\r\n */\r\nexport function extrudePolyline(polylines, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n    for (let i = 0; i < polylines.length; i++) {\r\n        updateBoundingRect(polylines[i], min, max);\r\n    }\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    normalizeOpts(opts);\r\n    const scale = opts.scale || [1, 1];\r\n\r\n    if (opts.lineWidth == null) {\r\n        opts.lineWidth = 1;\r\n    }\r\n    if (opts.miterLimit == null) {\r\n        opts.miterLimit = 2;\r\n    }\r\n    const preparedData = [];\r\n    // Extrude polyline to polygon\r\n    for (let i = 0; i < polylines.length; i++) {\r\n        let newPolyline = polylines[i];\r\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\r\n        if (simplifyTolerance > 0) {\r\n            newPolyline = doSimplify(newPolyline, simplifyTolerance, true);\r\n        }\r\n        preparedData.push(convertPolylineToTriangulatedPolygon(newPolyline, i, opts));\r\n    }\r\n\r\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\r\n}\r\n\r\nfunction updateBoundingRect(points, min, max) {\r\n    for (let i = 0; i < points.length; i++) {\r\n        min[0] = Math.min(points[i][0], min[0]);\r\n        min[1] = Math.min(points[i][1], min[1]);\r\n        max[0] = Math.max(points[i][0], max[0]);\r\n        max[1] = Math.max(points[i][1], max[1]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} geojson\r\n * @param {Object} [opts]\r\n * @param {number} [opts.depth]\r\n * @param {number} [opts.bevelSize = 0]\r\n * @param {number} [opts.bevelSegments = 2]\r\n * @param {number} [opts.simplify = 0]\r\n * @param {boolean} [opts.smoothSide = 'auto']\r\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\r\n * @param {boolean} [opts.smoothBevel = false]\r\n * @param {boolean} [opts.excludeBottom = false]\r\n * @param {boolean} [opts.lineWidth = 1]\r\n * @param {boolean} [opts.miterLimit = 2]\r\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\r\n * @param {Array} [opts.translate]\r\n * @param {Array} [opts.scale]\r\n * @param {Object} [opts.boundingRect]\r\n * @return {Object} {polyline: {indices, position, uv, normal}, polygon: {indices, position, uv, normal}}\r\n */\r\n\r\n// TODO Not merge feature\r\nexport function extrudeGeoJSON(geojson, opts) {\r\n\r\n    opts = Object.assign({}, opts);\r\n\r\n    const polylines = [];\r\n    const polygons = [];\r\n\r\n    const polylineFeatureIndices = [];\r\n    const polygonFeatureIndices = [];\r\n\r\n    const min = [Infinity, Infinity];\r\n    const max = [-Infinity, -Infinity];\r\n\r\n    for (let i = 0; i < geojson.features.length; i++) {\r\n        const feature = geojson.features[i];\r\n        const geometry = feature.geometry;\r\n        if (geometry && geometry.coordinates) {\r\n            switch (geometry.type) {\r\n                case 'LineString':\r\n                    polylines.push(geometry.coordinates);\r\n                    polylineFeatureIndices.push(i);\r\n                    updateBoundingRect(geometry.coordinates, min, max);\r\n                    break;\r\n                case 'MultiLineString':\r\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\r\n                        polylines.push(geometry.coordinates[k]);\r\n                        polylineFeatureIndices.push(i);\r\n                        updateBoundingRect(geometry.coordinates[k], min, max);\r\n                    }\r\n                    break;\r\n                case 'Polygon':\r\n                    polygons.push(geometry.coordinates);\r\n                    polygonFeatureIndices.push(i);\r\n                    updateBoundingRect(geometry.coordinates[0], min, max);\r\n                    break;\r\n                case 'MultiPolygon':\r\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\r\n                        polygons.push(geometry.coordinates[k]);\r\n                        polygonFeatureIndices.push(i);\r\n                        updateBoundingRect(geometry.coordinates[k][0], min, max);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    opts.boundingRect = opts.boundingRect || {\r\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\r\n    };\r\n\r\n    const originalDepth = opts.depth;\r\n    return {\r\n        polyline: extrudePolyline(polylines, Object.assign(opts, {\r\n            depth: function (idx) {\r\n                if (typeof originalDepth === 'function') {\r\n                    return originalDepth(\r\n                        geojson.features[polylineFeatureIndices[idx]]\r\n                    );\r\n                }\r\n                return originalDepth;\r\n            }\r\n        })),\r\n        polygon: extrudePolygon(polygons, Object.assign(opts, {\r\n            depth: function (idx) {\r\n                if (typeof originalDepth === 'function') {\r\n                    return originalDepth(\r\n                        geojson.features[polygonFeatureIndices[idx]]\r\n                    );\r\n                }\r\n                return originalDepth;\r\n            }\r\n        }))\r\n    };\r\n}"],"names":["getSqDist","p1","p2","dx","dy","getSqSegDist","p","x","y","t","simplifyRadialDist","points","sqTolerance","prevPoint","newPoints","point","i","len","length","push","simplifyDPStep","first","last","simplified","maxSqDist","index","sqDist","simplifyDouglasPeucker","simplify","tolerance","highestQuality","undefined","dot","v1","v2","v2Dot","normalize","out","v","z","d","Math","sqrt","v2Normalize","scale","s","scaleAndAdd","v2Add","v3Sub","v3Normalize","v3Cross","ax","ay","az","bx","by","bz","rel","slerp","start","end","cosT","theta","acos","cos","sin","lineIntersection","x1","y1","x2","y2","x3","y3","x4","y4","writeOffset","dx1","dx2","dy1","dy2","cross","tmp1","tmp2","t1","area","n","j","x0","y0","triangulate","vertices","holes","dimensions","earcut","flatten","data","innerOffsetPolygon","outStart","offset","miterLimit","close","removeIntersections","checkMiterLimit","cursor","indicesMap","Uint32Array","prevOffsetX","prevOffsetY","prevCursor","tmpIntersection","nextIdx","prevIdx","needCheckIntersection","offsetX","offsetY","tmp","cosA","sinA","miter","min","isCovex","mx","my","halfA","dist","tan","abs","innerOffsetPolyline","outOff","offsetPolygon","offsetVertices","Float32Array","exteriorSize","reversePoints","stride","floor","a","b","convertToClockwise","polygonVertexCount","h","normalizeOpts","opts","depth","bevelSize","bevelSegments","smoothBevel","smoothSide","smoothSideThreshold","round","boundingRect","translate","fitRect","targetX","targetY","targetWidth","width","targetHeight","height","generateNormal","indices","position","v3Set","c","p3","v21","v32","normals","f","i1","i2","i3","quadToTriangle","ringDistance","distance","preX","preY","firstX","firstY","addExtrudeSide","cursors","topVertices","splittedMap","rect","ringVertexCount","splitBevel","vertexOffset","vertex","ringPerimeter","size","max","isDuplicateVertex","idx","v0","ringCount","vLen","k","uLen","prevX","prevY","rawIdx","l","t2","PI","r","zz","prevX2","prevY2","prevZ2","uv","m","sideStartRingN","addTopAndBottom","indicesLen","excludeBottom","vertexCount","splitVertices","isAutoSmooth","newVertices","newHoles","count","polysCount","angleCos","innerExtrudeTriangulatedPolygon","preparedData","indexCount","faceEnd","faceStart","sideRingVertexCount","Uint16Array","val","normal","convertPolylineToTriangulatedPolygon","polyline","polylineIdx","lineWidth","pointCount","insidePoints","outsidePoints","outsideIndicesMap","insideIndicesMap","polygonVertices","outsidePointCount","off","res","rawVertices","removeClosePointsOfPolygon","polygon","epsilon","newPolygon","simplifyPolygon","doSimplify","extrudePolygon","polygons","Object","assign","Infinity","updateBoundingRect","transformdRect","simplifyTolerance","Error","extrudePolyline","polylines","newPolyline","extrudeGeoJSON","geojson","polylineFeatureIndices","polygonFeatureIndices","features","feature","geometry","coordinates","type","originalDepth"],"mappings":"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"}